import streamlit as st
import pandas as pd
import requests
import time
import altair as alt
from datetime import datetime

# ===== FUNCTION: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å SET API =====
def get_set_financial_data(symbol):
    url = f"https://www.set.or.th/api/set/stock/{symbol}/financial-highlight"
    headers = {
        "User-Agent": "Mozilla/5.0"
    }
    res = requests.get(url, headers=headers)
    if res.status_code != 200:
        return None

    data = res.json()
    return {
        "symbol": symbol,
        "price": float(data.get("lastPrice", 0)),
        "div_yield": float(data.get("dividendYield", 0)),
        "eps": float(data.get("eps", 0)),
        "roe": float(data.get("roe", 0)),
        "dps": float(data.get("dps", 0)),
        "pe": float(data.get("pe", 0)),
        "high_52w": float(data.get("fiftyTwoWeekHigh", 0)),
        "low_52w": float(data.get("fiftyTwoWeekLow", 0)),
        "market_cap": float(data.get("marketCap", 0))
    }

# ===== ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô SET =====
def load_all_symbols():
    url = "https://www.set.or.th/dat/eod/listedcompany/static/listedCompanies_th_TH.xlsx"
    df = pd.read_excel(url, skiprows=1)
    return df['‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå'].dropna().unique().tolist()

symbols = load_all_symbols()
data = []

st.set_page_config(page_title="Dividend Stock Dashboard", layout="wide")
st.title("üìà Dividend & Value Stock Dashboard")

st.markdown("""
‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á **‡∏õ‡∏±‡∏ô‡∏ú‡∏•‡πÄ‡∏î‡πà‡∏ô** ‡πÅ‡∏•‡∏∞ **‡∏Å‡∏≥‡πÑ‡∏£‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á** ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° (Fair Price)
""")

st.info(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô SET ({len(symbols)} ‡∏ï‡∏±‡∏ß)... ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà")

# ===== ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏ö‡∏ö loop =====
for i, sym in enumerate(symbols):
    info = get_set_financial_data(sym)
    if info:
        data.append(info)
    time.sleep(0.8)  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô block
    if i % 20 == 0:
        st.write(f"üìä ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß {i}/{len(symbols)} ‡∏ï‡∏±‡∏ß")

# ===== ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏ã‡∏∑‡πâ‡∏≠ =====
def calc_fair_price_ddm(dps, r=0.09, g=0.03):
    return dps / (r - g) if r > g else 0

def calc_fair_price_pe(eps, pe_avg=12):
    return eps * pe_avg

# ===== ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Dashboard =====
df = pd.DataFrame(data)
df["fair_price_ddm"] = df["dps"].apply(lambda x: round(calc_fair_price_ddm(x), 2))
df["fair_price_pe"] = df["eps"].apply(lambda x: round(calc_fair_price_pe(x), 2))
df["status"] = df.apply(lambda row: "‚úÖ ‡∏ô‡πà‡∏≤‡∏ã‡∏∑‡πâ‡∏≠" if row["price"] < min(row["fair_price_ddm"], row["fair_price_pe"]) else "‚õîÔ∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∏‡πâ‡∏°", axis=1)

# ===== ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á =====
st.sidebar.header("üîé ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏´‡∏∏‡πâ‡∏ô")
div_yield_min = st.sidebar.slider("Dividend Yield ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (%)", 0.0, 10.0, 4.0, 0.1)
roe_min = st.sidebar.slider("ROE ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (%)", 0.0, 20.0, 8.0, 0.5)
pe_max = st.sidebar.slider("P/E ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô", 0.0, 30.0, 15.0, 0.5)
market_cap_min = st.sidebar.number_input("Market Cap ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó)", value=10000.0)
price_range = st.sidebar.slider("‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô (‡∏ö‡∏≤‡∏ó)", 0.0, 500.0, (10.0, 200.0), 1.0)

filtered_df = df[(df["div_yield"] >= div_yield_min) &
                 (df["roe"] >= roe_min) &
                 (df["pe"] <= pe_max) &
                 (df["market_cap"] >= market_cap_min) &
                 (df["price"] >= price_range[0]) &
                 (df["price"] <= price_range[1])]

st.dataframe(filtered_df.style.format({
    "price": "{:.2f}",
    "div_yield": "{:.1f}%",
    "eps": "{:.2f}",
    "roe": "{:.1f}%",
    "dps": "{:.2f}",
    "fair_price_ddm": "{:.2f}",
    "fair_price_pe": "{:.2f}",
    "market_cap": "{:.0f}",
    "high_52w": "{:.2f}",
    "low_52w": "{:.2f}"
}).applymap(lambda x: "color: green" if isinstance(x, str) and "‡∏ô‡πà‡∏≤‡∏ã‡∏∑‡πâ‡∏≠" in x else ""))

# ===== ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏ã‡∏∑‡πâ‡∏≠ =====
st.subheader("üìä ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô vs ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°")
if not filtered_df.empty:
    chart_df = filtered_df.melt(id_vars=["symbol"], value_vars=["price", "fair_price_ddm", "fair_price_pe"],
                                var_name="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏Ñ‡∏≤", value_name="‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤")
    chart = alt.Chart(chart_df).mark_bar().encode(
        x=alt.X('symbol:N', title='‡∏´‡∏∏‡πâ‡∏ô'),
        y=alt.Y('‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤:Q', title='‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó)'),
        color='‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏Ñ‡∏≤:N',
        tooltip=['symbol', '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏Ñ‡∏≤', '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤']
    ).properties(
        width=800,
        height=400
    )
    st.altair_chart(chart, use_container_width=True)
else:
    st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç")

# ===== ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô =====
st.subheader("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
today = datetime.now().strftime("%Y-%m-%d")
st.download_button(
    label="üìÅ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel",
    data=filtered_df.to_excel(index=False),
    file_name=f"‡∏´‡∏∏‡πâ‡∏ô‡∏õ‡∏±‡∏ô‡∏ú‡∏•_{today}.xlsx",
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
)

st.caption("Developed by AI x ‡∏ô‡∏±‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏™‡∏≤‡∏¢‡∏õ‡∏±‡∏ô‡∏ú‡∏•")
